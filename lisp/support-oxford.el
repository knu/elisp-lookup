;;; oxford.el --- support file for "Oxford Dictionary/Thesaurus"
; -*- coding: iso-2022-7bit -*-
;; Copyright (C) 2000 Keisuke Nishida <knsihida@ring.gr.jp>

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License
;; as published by the Free Software Foundation; either version 2
;; of the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software Foundation,
;; Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

(require 'lookup)

(if (charsetp 'mule-unicode-0100-24ff)
    (progn
      (defmacro UCSTR1 (c1 c2)
	(char-to-string
	 (make-char 'mule-unicode-0100-24ff c1 c2)))
      (defmacro UCSTR2 (c1 c2)
	(char-to-string
	 (make-char 'mule-unicode-2500-33ff c1 c2)))))

(defconst oxford-gaiji-table
  (lookup-new-gaiji-table
   (nconc
    `(
      ("h0000" "=")
      ("h0f01" "=")
      ("h0f02" "=")
      ("h0f03" "=")
      ("h0f04" "=")
      ("h0f05" "=")
      ("h0f06" "=")
      ("h0f07" "=")
      ("h0f08" "=")
      ("h0f09" "=")
      ("h0f0a" "=")
      ("h0f0b" "=")
      ("h0f0c" "=")
      ("h0f0d" "=")
      ("h0f0e" "=")
      ("h0f0f" "=")
      ("h0f10" "=")
      ("h0f11" "=")
      ("h0f12" "=")
      ("h0f13" "=")
      ("h0f14" "=")
      ("h0f15" "=")
      ("h0f16" "=")
      ("h0f17" "=")
      ("h0f18" "=")
      ("h0f19" "=")
      ("h0f1a" "=")
      ("h0f1b" "=")
      ("h0f1c" "=")
      ("h0f1d" "=")
      ("h0f1e" "=")
      ("h0f1f" "=")
      ("h0f20" ",AX(B" "O")
      ("h0f21" ",Ax(B" "o")
      ("h0f23" ",Aa(B" "a")
      ("h0f24" ",D5(B" "i")
      ("h0f25" ",Ac(B" "a")
      ("h0f26" ,(cond
		 ((functionp 'propertize)
		  (propertize "&" 'face 'bold))
		 (t
		  "&")))
      ("h0f27" ",Ay(B" "u")
      ("h0f28" ",Ay(B" "u")
      ("h0f2a" ",Ae(B" "a")
      ("h0f2b" ",00(B" "oe")
      ("h0f2c" ",00(B" "oe")
      ("h0f30" "<HEAD2>0</HEAD2>")
      ("h0f31" "<HEAD2>1</HEAD2>")
      ("h0f32" "<HEAD2>2</HEAD2>")
      ("h0f33" "<HEAD2>3</HEAD2>")
      ("h0f34" "<HEAD2>4</HEAD2>")
      ("h0f35" "<HEAD2>5</HEAD2>")
      ("h0f36" "<HEAD2>6</HEAD2>")
      ("h0f37" "<HEAD2>7</HEAD2>")
      ("h0f38" "<HEAD2>8</HEAD2>")
      ("h0f39" "<HEAD2>9</HEAD2>")
      ("h0f3a" "<HEAD2>:</HEAD2>")
      ("h0f3b" "<HEAD2>;</HEAD2>")
      ("h0f41" "<HEAD1>A</HEAD1>")
      ("h0f42" "<HEAD1>B</HEAD1>")
      ("h0f43" "<HEAD1>C</HEAD1>")
      ("h0f44" "<HEAD1>D</HEAD1>")
      ("h0f45" "<HEAD1>E</HEAD1>")
      ("h0f46" "<HEAD1>F</HEAD1>")
      ("h0f47" "<HEAD1>G</HEAD1>")
      ("h0f48" "<HEAD1>H</HEAD1>")
      ("h0f49" "<HEAD1>I</HEAD1>")
      ("h0f4a" "<HEAD1>J</HEAD1>")
      ("h0f4b" "<HEAD1>K</HEAD1>")
      ("h0f4c" "<HEAD1>L</HEAD1>")
      ("h0f4d" "<HEAD1>M</HEAD1>")
      ("h0f4e" "<HEAD1>N</HEAD1>")
      ("h0f4f" "<HEAD1>O</HEAD1>")
      ("h0f50" "<HEAD1>P</HEAD1>")
      ("h0f51" "<HEAD1>Q</HEAD1>")
      ("h0f52" "<HEAD1>R</HEAD1>")
      ("h0f53" "<HEAD1>S</HEAD1>")
      ("h0f54" "<HEAD1>T</HEAD1>")
      ("h0f55" "<HEAD1>U</HEAD1>")
      ("h0f56" "<HEAD1>V</HEAD1>")
      ("h0f57" "<HEAD1>W</HEAD1>")
      ("h0f58" "<HEAD1>X</HEAD1>")
      ("h0f59" "<HEAD1>Y</HEAD1>")
      ("h0f5a" "<HEAD1>Z</HEAD1>")
      ("h0f5c" ",AI(B" "E")
      ("h0f5d" ",A)(B" "(C)")
      ("h0f5e" ",AE(B" "A")
      ("h0f5f" [compose ",Af(B~"] "ae")
      ("h0f60" ",Av(B" "o")
      ("h0f61" "<HEAD1>a</HEAD1>")
      ("h0f62" "<HEAD1>b</HEAD1>")
      ("h0f63" "<HEAD1>c</HEAD1>")
      ("h0f64" "<HEAD1>d</HEAD1>")
      ("h0f65" "<HEAD1>e</HEAD1>")
      ("h0f66" "<HEAD1>f</HEAD1>")
      ("h0f67" "<HEAD1>g</HEAD1>")
      ("h0f68" "<HEAD1>h</HEAD1>")
      ("h0f69" "<HEAD1>i</HEAD1>")
      ("h0f6a" "<HEAD1>j</HEAD1>")
      ("h0f6b" "<HEAD1>k</HEAD1>")
      ("h0f6c" "<HEAD1>l</HEAD1>")
      ("h0f6d" "<HEAD1>m</HEAD1>")
      ("h0f6e" "<HEAD1>n</HEAD1>")
      ("h0f6f" "<HEAD1>o</HEAD1>")
      ("h0f70" "<HEAD1>p</HEAD1>")
      ("h0f71" "<HEAD1>q</HEAD1>")
      ("h0f72" "<HEAD1>r</HEAD1>")
      ("h0f73" "<HEAD1>s</HEAD1>")
      ("h0f74" "<HEAD1>t</HEAD1>")
      ("h0f75" "<HEAD1>u</HEAD1>")
      ("h0f76" "<HEAD1>v</HEAD1>")
      ("h0f77" "<HEAD1>w</HEAD1>")
      ("h0f78" "<HEAD1>x</HEAD1>")
      ("h0f79" "<HEAD1>y</HEAD1>")
      ("h0f7a" "<HEAD1>z</HEAD1>")
      ("h0f7b" ",A{(B" "u")
      ("h0f7c" ",D}(B" "u")
      ("h0f7f" ",Aq(B" "n")
      ("h0f80" ",Az(B" "u")
      ("h0f81" ",A|(B" "u")
      ("h0f82" ",Ai(B" "e")
      ("h0f83" ",Ab(B" "a")
      ("h0f84" ",Ad(B" "a")
      ("h0f85" ",A`(B" "a")
      ("h0f86" ",An(B" "i")
      ("h0f87" ",Ag(B" "c")
      ("h0f88" ",Aj(B" "e")
      ("h0f89" ",At(B" "o")
      ("h0f8a" ",Ah(B" "e")
      ("h0f8b" ",Ao(B" "i")
      ("h0f8c" ",Ae(B" "a")
      ("h0f8d" ",BH(B" "C")
      ("h0f8e" ",Bh(B" "c")
      ("h0f8f" ",Aa(B" "a")
      ("h0f90" ",0p(B")
      ("h0f91" ",A9(B")
      ("h0f92" ",A2(B")
      ("h0f93" ",A3(B")
      ("h0f97" ",0,(B")
      ("h0f98" ",0<(B")
      ("h0f9a" ",Am(B" "i")
      ("h0f9c" ",A.(B")
      ("h0f9d" nil "[D]")
      ("h0f9f" ",Av(B" "o")
      ("h0fa0" ",0q(B")
      ("h0fac" ",Ak(B" "e")
      ("h0fad" ",AD(B" "A")
      ("h0fae" ",Af(B" "ae")
      ("h0faf" ",As(B" "o")
      ("h0fb0" ",0M(B")
      ("h0fb1" ",0L(B")
      ("h0fb2" ",D?(B")
      ("h0fb3" ",Fh(B")
      ("h0fb4" ",Ap(B")
      ("h0fb5" ",Af(B")
      ("h0fb6" ",0!(B")
      ("h0fb7" ",0'(B")
      ("h0fb8" ",0((B")
      ("h0fb9" ",05(B")
      ("h0fba" ",0+(B")
      ("h0fbc" ",07(B")
      ("h0fbd" [compose ",07(B~"])
      ("h0fbe" ",AE(B" "A")
      ("h0fbf" ",AV(B" "O")
      ("h0fc0" ",A`(B" "a")
      ("h0fc1" "<HEAD3>a</HEAD3>")
      ("h0fc2" "<HEAD3>b</HEAD3>")
      ("h0fc3" "<HEAD3>c</HEAD3>")
      ("h0fc4" "<HEAD3>d</HEAD3>")
      ("h0fc5" "<HEAD3>e</HEAD3>")
      ("h0fc6" "<HEAD3>f</HEAD3>")
      ("h0fc7" "<HEAD3>g</HEAD3>")
      ("h0fc8" "<HEAD3>h</HEAD3>")
      ("h0fc9" "<HEAD3>i</HEAD3>")
      ("h0fca" "<HEAD3>j</HEAD3>")
      ("h0fcb" "<HEAD3>k</HEAD3>")
      ("h0fcc" "<HEAD3>l</HEAD3>")
      ("h0fcd" "<HEAD3>m</HEAD3>")
      ("h0fce" "<HEAD3>n</HEAD3>")
      ("h0fcf" "<HEAD3>o</HEAD3>")
      ("h0fd0" "<HEAD3>p</HEAD3>")
      ("h0fd1" "<HEAD3>q</HEAD3>")
      ("h0fd2" "<HEAD3>r</HEAD3>")
      ("h0fd3" "<HEAD3>s</HEAD3>")
      ("h0fd4" "<HEAD3>t</HEAD3>")
      ("h0fd5" "<HEAD3>u</HEAD3>")
      ("h0fd6" "<HEAD3>v</HEAD3>")
      ("h0fd7" "<HEAD3>w</HEAD3>")
      ("h0fd8" "<HEAD3>x</HEAD3>")
      ("h0fd9" "<HEAD3>y</HEAD3>")
      ("h0fda" "<HEAD3>z</HEAD3>")
      ("h0fdb" "<HEAD3>,Ai(B</HEAD3>")
      ("h0fdc" "<HEAD3>,Ag(B</HEAD3>")
      ("h0fdd" "<HEAD3>,Ah(B</HEAD3>")
      ("h0fde" "<HEAD3>,Aj(B</HEAD3>")
      ("h0fdf" "<HEAD3>,Ab(B</HEAD3>")
      ("h0fe0" "<HEAD3>,Ad(B</HEAD3>")
      ("h0fe1" "<HEAD3>A</HEAD3>")
      ("h0fe2" "<HEAD3>B</HEAD3>")
      ("h0fe3" "<HEAD3>C</HEAD3>")
      ("h0fe4" "<HEAD3>D</HEAD3>")
      ("h0fe5" "<HEAD3>E</HEAD3>")
      ("h0fe6" "<HEAD3>F</HEAD3>")
      ("h0fe7" "<HEAD3>G</HEAD3>")
      ("h0fe8" "<HEAD3>H</HEAD3>")
      ("h0fe9" "<HEAD3>I</HEAD3>")
      ("h0fea" "<HEAD3>J</HEAD3>")
      ("h0feb" "<HEAD3>K</HEAD3>")
      ("h0fec" "<HEAD3>L</HEAD3>")
      ("h0fed" "<HEAD3>M</HEAD3>")
      ("h0fee" "<HEAD3>N</HEAD3>")
      ("h0fef" "<HEAD3>O</HEAD3>")
      ("h0ff0" "<HEAD3>P</HEAD3>")
      ("h0ff1" "<HEAD3>Q</HEAD3>")
      ("h0ff2" "<HEAD3>R</HEAD3>")
      ("h0ff3" "<HEAD3>S</HEAD3>")
      ("h0ff4" "<HEAD3>T</HEAD3>")
      ("h0ff5" "<HEAD3>U</HEAD3>")
      ("h0ff6" "<HEAD3>V</HEAD3>")
      ("h0ff7" "<HEAD3>W</HEAD3>")
      ("h0ff8" "<HEAD3>X</HEAD3>")
      ("h0ff9" "<HEAD3>Y</HEAD3>")
      ("h0ffa" "<HEAD3>Z</HEAD3>")
      ("h0ffb" ",A|(B" "u")
      ("h0ffc" ",An(B" "i")
      ("h0ffd" ",At(B" "o")
      ("h0ffe" ",Aq(B" "n")
      ("h1001" "="))

    (cond
     ((charsetp 'mule-unicode-0100-24ff)
      `(
	("h0f22" ,(UCSTR2 33 96))
	("h0f3c" ,(UCSTR1 115 112))
	("h0f3d" ,(UCSTR1 115 120))
	("h0f3e" ,(UCSTR1 115 121))
	("h0f3f" ,(UCSTR1 116 32)) 
	("h0f40" ,(UCSTR1 120 59))
	("h0f5b" ,(UCSTR1 120 58))
	("h0f7d" ,(UCSTR1 120 39) "$B"&(B")
	("h0f7e" ,(UCSTR2 33 97))
	("h0f94" ,(UCSTR1 115 116))
	("h0f95" ,(UCSTR1 115 117))
	("h0f96" ,(UCSTR1 115 118))
	("h0f99" ,(compose-chars
		   (make-char 'ipa 44)
		   (make-char 'mule-unicode-0100-24ff 37 64)))
	("h0f9b" ,(UCSTR1 121 33))
	("h0fa1" ,(UCSTR1 116 33))
	("h0fa2" ,(UCSTR1 116 34))
	("h0fa3" ,(UCSTR1 116 35))
	("h0fa4" ,(UCSTR1 116 36))
	("h0fa5" ,(UCSTR1 116 37))
	("h0fa6" ,(UCSTR1 116 38))
	("h0fa7" ,(UCSTR1 116 39))
	("h0fa8" ,(UCSTR1 116 40))
	("h0fa9" ,(UCSTR1 116 41))
	("h0faa" ,(UCSTR1 115 122))
	("h0fab" ,(UCSTR1 115 123))
	("h0fbb" ,(UCSTR1 35 92))
	))
     (t
      '(
	("h0f40" "3$B"e(B")
	("h0f5b" "$B"e(B")
	("h0f7d" "$B"&(B")
	("h0f7e" "$B""(B")
	))))))

(defconst oxford-delimiter
  (cond
   ((charsetp 'mule-unicode-0100-24ff)
    (char-to-string (make-char 'mule-unicode-2500-33ff 33 97)))
   (t
    "$B""(B")))

(defun oxford-arrange-structure (entry)
  (goto-char (point-min))
  (next-line 1)
  (and
   (search-forward ". -" nil t)
   (insert "\n "))
  (goto-char (point-min))
  (replace-string "</HEAD1><HEAD1>" "" nil)
  (goto-char (point-min))  
  (replace-string "</HEAD2><HEAD2>" "" nil)
  (goto-char (point-min))  
  (replace-string "</HEAD3><HEAD3>" "" nil)
  (goto-char (point-min))
  (replace-string "</HEAD1>-<HEAD1>" "-" nil)
  (goto-char (point-min))
  (while (re-search-forward "<HEAD1>\\([^<]*\\)</HEAD1>" nil t)
    (put-text-property (match-beginning 1)
		       (match-end 1)
		       'face 'lookup-heading-1-face))
  (goto-char (point-min))
  (while (re-search-forward "<HEAD2>\\([^<]*\\)</HEAD2>" nil t)
    (put-text-property (match-beginning 1)
		       (match-end 1)
		       'face 'lookup-heading-2-face))
  (goto-char (point-min))
  (while (re-search-forward "<HEAD3>\\([^<]*\\)</HEAD3>" nil t)
    (put-text-property (match-beginning 1)
		       (match-end 1)
		       'face 'lookup-heading-3-face))

  (goto-char (point-min))
  (while (re-search-forward "([^)]*\\(</?HEAD.>\\)[^)]*)" nil t)
    (delete-region (match-beginning 1)
		   (match-end 1))
    (goto-char (match-beginning 0)))

  (goto-char (point-min))
  (while (re-search-forward
	  "\\. <HEAD3>\\([nv]\\|adj\\)</HEAD3>\\. " nil t)
    (goto-char (match-end 0))
    (backward-char 1)
    (insert "\n")
    (delete-char 1)
    (goto-char (match-beginning 0))
    (forward-char 1)
    (insert "\n"))

  (goto-char (point-min))
  (and
   (search-forward oxford-delimiter nil t)
   (let ((p (point)))
     (backward-char 1)
     (insert "\n")
     (forward-char 1)
     (insert "\n")
     (replace-string ". <HEAD1>" ".\n" nil)
     (goto-char p)
     (replace-string "<HEAD2>" "\n " nil)))

  (goto-char (point-min))
  (replace-string "</HEAD2> <HEAD1>" "" nil)


  (goto-char (point-min))
  (save-excursion
    (save-restriction
      (narrow-to-region
       (point-min)
       (if (search-forward oxford-delimiter nil t)
	   (point)
	 (point-max)))

      (goto-char (point-min))
      (replace-string "\. <HEAD2>" "\n" nil)
      (goto-char (point-min))
      (replace-string "\) <HEAD2>" ")\n" nil)
      (goto-char (point-min))
      (replace-string "\. <HEAD3>" ".\n " nil)
      (goto-char (point-min))
      (replace-string "\) <HEAD3>" ")\n " nil)))

  (goto-char (point-min))
  (replace-string "<HEAD1>" "" nil)
  (goto-char (point-min))
  (replace-string "</HEAD1>" "" nil)
  (goto-char (point-min))
  (replace-string "<HEAD2>" "" nil)
  (goto-char (point-min))
  (replace-string "</HEAD2>" "" nil)
  (goto-char (point-min))
  (replace-string "<HEAD3>" "" nil)
  (goto-char (point-min))
  (replace-string "</HEAD3>" "" nil)

  )

(setq lookup-support-options
      (list ':title "Oxford Dictionary"
            ':coding (if (memq system-type '(ms-dos windows-nt OS/2 emx))
			 'iso-8859-1-dos
		       'iso-8859-1)
	    ':replace-alist `((,(char-to-string (make-char 'latin-iso8859-1 32)) . " "))
            ':stop-code "0x1f090000"
            ':gaiji-table oxford-gaiji-table
            ':arrange-table '((structure . oxford-arrange-structure))
            ':transformer 'lookup-stemming-search))

;;; oxford.el ends here
