#! ruby -Ks

# make_jukugo_list.rb
# 字通の熟語字検索見出しリストと熟語→親字参照表から
# 読み付き見出しリストを生成する

# edit_yomi: 読みを編集して現代音と旧音を分ける
def edit_yomi(yomi)
    # 字通にあるエラーデータの訂正
    yomi.gsub!(/い（ゐ）いい（ゐ）だ/, "い（ゐ）だ")
    yomi.gsub!(/そうぼう（さうばう）そうもう（さうまう）/, "そうぼう（さうばう）・そうもう（さうまう）")
    yomi.gsub!(/ちやえん（ゑん）さえん（ゑん）/, "ちやえん（ゑん）・さえん（ゑん）")

    # "読み1（読み2）読み3" → "読み1読み3（読み2読み3）"
    # 例: "い（ゐ）かい" → "いかい（ゐかい）"
    yomi.gsub!(/([あ-ん]+)（([あ-ん]+)）([あ-ん]+)/, "\\1\\3（\\2\\3）")

    # "読み1 現代音（旧音）" → "読み1 現代音（読み1 旧音）"
    # 例: "いかい（くわい）" → "いかい（いくわい）"
    # 機械的に変換できないので、すべての候補を列挙する
    yomi.gsub!(/([あ-ん]+)じがはい（ぢがはい）/, "\\1じがはい（\\1ぢがはい）")
    yomi.gsub!(/([あ-ん]+)かい（くわい）/, "\\1かい（\\1くわい）")
    yomi.gsub!(/([あ-ん]+)がい（ぐわい）/, "\\1がい（\\1ぐわい）")
    yomi.gsub!(/([あ-ん]+)えい（ゑい）/, "\\1えい（\\1ゑい）")
    yomi.gsub!(/([あ-ん]+)おう（あう）/, "\\1おう（\\1あう）")
    yomi.gsub!(/([あ-ん]+)ゆう（いう）/, "\\1ゆう（\\1いう）")
    yomi.gsub!(/([あ-ん]+)よう（えう）/, "\\1よう（\\1えう）")
    yomi.gsub!(/([あ-ん]+)こう（かう）/, "\\1こう（\\1かう）")
    yomi.gsub!(/([あ-ん]+)ごう（がう）/, "\\1ごう（\\1がう）")
    yomi.gsub!(/([あ-ん]+)きゆう（きう）/, "\\1きゆう（\\1きう）")
    yomi.gsub!(/([あ-ん]+)ぎゆう（ぎう）/, "\\1ぎゆう（\\1ぎう）")
    yomi.gsub!(/([あ-ん]+)きよう（けう）/, "\\1きよう（\\1けう）")
    yomi.gsub!(/([あ-ん]+)ぎよう（げう）/, "\\1ぎよう（\\1げう）")
    yomi.gsub!(/([あ-ん]+)そう（さう）/, "\\1そう（\\1さう）")
    yomi.gsub!(/([あ-ん]+)ぞう（ざう）/, "\\1ぞう（\\1ざう）")
    yomi.gsub!(/([あ-ん]+)しゆう（しう）/, "\\1しゆう（\\1しう）")
    yomi.gsub!(/([あ-ん]+)じゆう（じう）/, "\\1じゆう（\\1じう）")
    yomi.gsub!(/([あ-ん]+)しよう（せう）/, "\\1しよう（\\1せう）")
    yomi.gsub!(/([あ-ん]+)じよう（ぜう）/, "\\1じよう（\\1ぜう）")
    yomi.gsub!(/([あ-ん]+)とう（たう）/, "\\1とう（\\1たう）")
    yomi.gsub!(/([あ-ん]+)どう（だう）/, "\\1どう（\\1だう）")
    yomi.gsub!(/([あ-ん]+)ちゆう（ちう）/, "\\1ちゆう（\\1ちう）")
    yomi.gsub!(/([あ-ん]+)じゆう（ぢう）/, "\\1じゆう（\\1ぢう）")
    yomi.gsub!(/([あ-ん]+)ちよう（てう）/, "\\1ちよう（\\1てう）")
    yomi.gsub!(/([あ-ん]+)じよう（でう）/, "\\1じよう（\\1でう）")
    yomi.gsub!(/([あ-ん]+)のう（なう）/, "\\1のう（\\1なう）")
    yomi.gsub!(/([あ-ん]+)にゆう（にう）/, "\\1にゆう（\\1にう）")
    yomi.gsub!(/([あ-ん]+)によう（ねう）/, "\\1によう（\\1ねう）")
    yomi.gsub!(/([あ-ん]+)ほう（はう）/, "\\1ほう（\\1はう）")
    yomi.gsub!(/([あ-ん]+)ぼう（ばう）/, "\\1ぼう（\\1ばう）")
    yomi.gsub!(/([あ-ん]+)ぽう（ぱう）/, "\\1ぽう（\\1ぱう）")
    yomi.gsub!(/([あ-ん]+)びゆう（びう）/, "\\1びゆう（\\1びう）")
    yomi.gsub!(/([あ-ん]+)ひよう（へう）/, "\\1ひよう（\\1へう）")
    yomi.gsub!(/([あ-ん]+)びよう（べう）/, "\\1びよう（\\1べう）")
    yomi.gsub!(/([あ-ん]+)ぴよう（ぺう）/, "\\1ぴよう（\\1ぺう）")
    yomi.gsub!(/([あ-ん]+)もう（まう）/, "\\1もう（\\1まう）")
    yomi.gsub!(/([あ-ん]+)みよう（めう）/, "\\1みよう（\\1めう）")
    yomi.gsub!(/([あ-ん]+)よう（やう）/, "\\1よう（\\1やう）")
    yomi.gsub!(/([あ-ん]+)きよう（きやう）/, "\\1きよう（\\1きやう）")
    yomi.gsub!(/([あ-ん]+)ぎよう（ぎやう）/, "\\1ぎよう（\\1ぎやう）")
    yomi.gsub!(/([あ-ん]+)しよう（しやう）/, "\\1しよう（\\1しやう）")
    yomi.gsub!(/([あ-ん]+)じよう（じやう）/, "\\1じよう（\\1じやう）")
    yomi.gsub!(/([あ-ん]+)ちよう（ちやう）/, "\\1ちよう（\\1ちやう）")
    yomi.gsub!(/([あ-ん]+)じよう（ぢやう）/, "\\1じよう（\\1ぢやう）")
    yomi.gsub!(/([あ-ん]+)ひよう（ひやう）/, "\\1ひよう（\\1ひやう）")
    yomi.gsub!(/([あ-ん]+)びよう（びやう）/, "\\1びよう（\\1びやう）")
    yomi.gsub!(/([あ-ん]+)ぴよう（ぴやう）/, "\\1ぴよう（\\1ぴやう）")
    yomi.gsub!(/([あ-ん]+)みよう（みやう）/, "\\1みよう（\\1みやう）")
    yomi.gsub!(/([あ-ん]+)りよう（りやう）/, "\\1りよう（\\1りやう）")
    yomi.gsub!(/([あ-ん]+)じゆう（ぢゆう）/, "\\1じゆう（\\1ぢゆう）")
    yomi.gsub!(/([あ-ん]+)ろう（らう）/, "\\1ろう（\\1らう）")
    yomi.gsub!(/([あ-ん]+)りゆう（りう）/, "\\1りゆう（\\1りう）")
    yomi.gsub!(/([あ-ん]+)りよう（れう）/, "\\1りよう（\\1れう）")
    yomi.gsub!(/([あ-ん]+)おう（わう）/, "\\1おう（\\1わう）")
    yomi.gsub!(/([あ-ん]+)こう（くわう）/, "\\1こう（\\1くわう）")
    yomi.gsub!(/([あ-ん]+)おう（をう）/, "\\1おう（\\1をう）")
    yomi.gsub!(/([あ-ん]+)いき（ゐき）/, "\\1いき（\\1ゐき）")
    yomi.gsub!(/([あ-ん]+)じく（ぢく）/, "\\1じく（\\1ぢく）")
    yomi.gsub!(/([あ-ん]+)かく（くわく）/, "\\1かく（\\1くわく）")
    yomi.gsub!(/([あ-ん]+)いく（ゐく）/, "\\1いく（\\1ゐく）")
    yomi.gsub!(/([あ-ん]+)おく（をく）/, "\\1おく（\\1をく）")
    yomi.gsub!(/([あ-ん]+)かさんげ（くわさんげ）/, "\\1かさんげ（\\1くわさんげ）")
    yomi.gsub!(/([あ-ん]+)かれんげ（くわれんげ）/, "\\1かれんげ（\\1くわれんげ）")
    yomi.gsub!(/([あ-ん]+)ずこ（づこ）/, "\\1ずこ（\\1づこ）")
    yomi.gsub!(/([あ-ん]+)ずれぞ（づれぞ）/, "\\1ずれぞ（\\1づれぞ）")
    yomi.gsub!(/([あ-ん]+)おち（をち）/, "\\1おち（\\1をち）")
    yomi.gsub!(/([あ-ん]+)じ（ぢ）/, "\\1じ（\\1ぢ）")
    yomi.gsub!(/([あ-ん]+)じつ（ぢつ）/, "\\1じつ（\\1ぢつ）")
    yomi.gsub!(/([あ-ん]+)かつ（くわつ）/, "\\1かつ（\\1くわつ）")
    yomi.gsub!(/([あ-ん]+)えつ（ゑつ）/, "\\1えつ（\\1ゑつ）")
    yomi.gsub!(/([あ-ん]+)おつ（をつ）/, "\\1おつ（\\1をつ）")
    yomi.gsub!(/([あ-ん]+)ず（づ）/, "\\1ず（\\1づ）")
    yomi.gsub!(/([あ-ん]+)わ（は）/, "\\1わ（\\1は）")
    yomi.gsub!(/([あ-ん]+)い（ひ）/, "\\1い（\\1ひ）")
    yomi.gsub!(/([あ-ん]+)おう（あふ）/, "\\1おう（\\1あふ）")
    yomi.gsub!(/([あ-ん]+)いう（いふ）/, "\\1いう（\\1いふ）")
    yomi.gsub!(/([あ-ん]+)ゆう（いふ）/, "\\1ゆう（\\1いふ）")
    yomi.gsub!(/([あ-ん]+)よう（えふ）/, "\\1よう（\\1えふ）")
    yomi.gsub!(/([あ-ん]+)こう（かふ）/, "\\1こう（\\1かふ）")
    yomi.gsub!(/([あ-ん]+)ごう（がふ）/, "\\1ごう（\\1がふ）")
    yomi.gsub!(/([あ-ん]+)きゆう（きふ）/, "\\1きゆう（\\1きふ）")
    yomi.gsub!(/([あ-ん]+)きよう（けふ）/, "\\1きよう（\\1けふ）")
    yomi.gsub!(/([あ-ん]+)ぎよう（げふ）/, "\\1ぎよう（\\1げふ）")
    yomi.gsub!(/([あ-ん]+)ごう（ごふ）/, "\\1ごう（\\1ごふ）")
    yomi.gsub!(/([あ-ん]+)そう（さふ）/, "\\1そう（\\1さふ）")
    yomi.gsub!(/([あ-ん]+)しゆう（しふ）/, "\\1しゆう（\\1しふ）")
    yomi.gsub!(/([あ-ん]+)じゆう（じふ）/, "\\1じゆう（\\1じふ）")
    yomi.gsub!(/([あ-ん]+)しよう（せふ）/, "\\1しよう（\\1せふ）")
    yomi.gsub!(/([あ-ん]+)とう（たふ）/, "\\1とう（\\1たふ）")
    yomi.gsub!(/([あ-ん]+)ちよう（てふ）/, "\\1ちよう（\\1てふ）")
    yomi.gsub!(/([あ-ん]+)じよう（でふ）/, "\\1じよう（\\1でふ）")
    yomi.gsub!(/([あ-ん]+)のう（なふ）/, "\\1のう（\\1なふ）")
    yomi.gsub!(/([あ-ん]+)にゆう（にふ）/, "\\1にゆう（\\1にふ）")
    yomi.gsub!(/([あ-ん]+)ほう（はふ）/, "\\1ほう（\\1はふ）")
    yomi.gsub!(/([あ-ん]+)ぼう（ばふ）/, "\\1ぼう（\\1ばふ）")
    yomi.gsub!(/([あ-ん]+)ぽう（ぱふ）/, "\\1ぽう（\\1ぱふ）")
    yomi.gsub!(/([あ-ん]+)ろう（らふ）/, "\\1ろう（\\1らふ）")
    yomi.gsub!(/([あ-ん]+)りゆう（りふ）/, "\\1りゆう（\\1りふ）")
    yomi.gsub!(/([あ-ん]+)りよう（れふ）/, "\\1りよう（\\1れふ）")
    yomi.gsub!(/([あ-ん]+)いえ（いへ）/, "\\1いえ（\\1いへ）")
    yomi.gsub!(/([あ-ん]+)じよ（ぢよ）/, "\\1じよ（\\1ぢよ）")
    yomi.gsub!(/([あ-ん]+)か（くわ）/, "\\1か（\\1くわ）")
    yomi.gsub!(/([あ-ん]+)が（ぐわ）/, "\\1が（\\1ぐわ）")
    yomi.gsub!(/([あ-ん]+)い（ゐ）/, "\\1い（\\1ゐ）")
    yomi.gsub!(/([あ-ん]+)お（を）/, "\\1お（\\1を）")
    yomi.gsub!(/([あ-ん]+)じん（ぢん）/, "\\1じん（\\1ぢん）")
    yomi.gsub!(/([あ-ん]+)かん（くわん）/, "\\1かん（\\1くわん）")
    yomi.gsub!(/([あ-ん]+)がん（ぐわん）/, "\\1がん（\\1ぐわん）")
    yomi.gsub!(/([あ-ん]+)いん（ゐん）/, "\\1いん（\\1ゐん）")
    yomi.gsub!(/([あ-ん]+)えん（ゑん）/, "\\1えん（\\1ゑん）")
    yomi.gsub!(/([あ-ん]+)おん（をん）/, "\\1おん（\\1をん）")
end

def add_yomi_tag(yomi)
  return yomi.split(/・/).map {|y|
    "<yomi>"+y.sub(/（|\z/,'</yomi>\&')
  }.join("・")
end

# simplify_font: 漢字表記のフォント指定を簡略化する
def simplify_font(kanji)
    kanji.gsub!(/<\/ST>/, "")
    kanji.gsub!(/<ST,(12|13|14|51)>/, "<\\1>")
    kanji.gsub!(/<ST,2([45])>/, "<2\\1>")
    kanji.gsub!(/<ST,(11|3[345]|41)>/, "<11>")
    kanji.gsub!(/<ST,[0-9]+>/, "")
end

# decrypt: lstエントリの内容を平文にする
def decrypt(ent, len)
    # 先頭から4の倍数バイトのあいだは
    # 4バイトBEとして0xffffffffをXORし、
    # さらに0x8831b311を符号なし加算する
    len4 = len & ~3
    arr = ent[0, len4].unpack("N*")
    arr.length.times { |i|
	arr[i] = ((arr[i] ^ 0xffffffff) + 0x8831b311) & 0xffffffff
    }
    ent[0, len4] = arr.pack("N*")

    # 余りのバイトは0xffとXORする
    i = len4
    while i < len
	ent[i] ^= 0xff
	i += 1
    end

    # 0x00や0xffの直前までを結果として返す
    i = 0
    while i < len && ent[i] != 0x00 && ent[i] != 0xff
	i += 1
    end
    return ent[0, i]
end

# メイン

# lst/tblファイル名
JUKUGO_LST = "lst/jukugo.lst"
JUKU2OYA_TBL = "tbl/juku2oya.tbl"

# lst/tblファイルをオープンする
if ARGV[0] == nil then
    STDERR.print "Usage: make_jukugo_list.rb data_directory\n"
    exit(1)
end
lst_path = ARGV[0] + "/" + JUKUGO_LST
tbl_path = ARGV[0] + "/" + JUKU2OYA_TBL
begin
    lstf = File.open(lst_path, "rb")
    tblf = File.open(tbl_path, "rb")
rescue
    STDERR.print "Can't open lst/tbl files\n"
    exit 1
end

# lstエントリ数/エントリサイズ/文字列サイズを取得する
lstf.seek(12, IO::SEEK_SET)
ent_num = lstf.read(4).unpack("V1")[0]
lst_ent_len = lstf.read(4).unpack("V1")[0]
lst_str_len = lstf.read(4).unpack("V1")[0]
lstf.seek(32, IO::SEEK_SET)

# lst/tblエントリを全件読み、
# エントリ番号/エントリ内参照番号とともに整形して出力する
kanji = nil
yomi = nil
ent_num.times { |i|
    # lstエントリを読んで平文にする
    list = lstf.read(lst_str_len)
    list = decrypt(list, lst_str_len)
    dummy = lstf.read(lst_ent_len - lst_str_len)

    # lstエントリを漢字表記と読みに分割する
    list.gsub(/^(.*)<ST,80>(.*)<\/ST>$/) {
	kanji = $1
	yomi = $2
    }

    # 漢字表記のフォント指定を簡略化する
    simplify_font(kanji)

    # 読みに括弧が含まれていたら編集する
    if yomi.index("（") != nil then
	edit_yomi(yomi)
    end

    # tblエントリを読む
    tbl_ent_no = tblf.read(4).unpack("V1")[0]
    tbl_ref_no = tblf.read(4).unpack("V1")[0]
    
    # 参照番号付きでlstエントリを出力する
    yomi=add_yomi_tag(yomi)
    printf "%04d:%04d %s%s\n", tbl_ent_no, tbl_ref_no, kanji, yomi
}

# 後始末
lstf.close
tblf.close
